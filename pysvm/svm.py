# -*- coding: utf-8 -*-

__all__ = ['VerifyCodeManager', 'default_manager']

import random
import hashlib
import StringIO
import logging
from redis import Redis
from PIL import Image, ImageDraw, ImageFont, ImageFilter
from .exc import VerifyCodeError

logger = logging.getLogger(__name__)


####################
# default parameters
####################

CHARSET = [
    'A',
    'B',
    'C',
    'D',
    'E',
    'F',
    'G',
    'H',
    'I',
    'J',
    'K',
    'L',
    'M',
    'N',
    'O',
    'P',
    'Q',
    'R',
    'S',
    'T',
    'U',
    'V',
    'W',
    'Z',
    'Y',
    'Z',
    '0',
    '1',
    '2',
    '3',
    '4',
    '5',
    '6',
    '7',
    '8',
    '9']

REDIS_DSN = "redis://localhost:6379/0"
TOKEN_EXPIRATION = 60
BG_COLOR = (255, 255, 255)
MAX_TRY = 3


class VerifyCodeManager(object):
    """
    Create verify code image.

    :param charset: Character collection in which verify code symbols choose
        from, default `CHARSET`.
    :param width: Width of the verify code picture, in pixels, default 120.
    :param height: Height of the verify code picture, in pixels, default 30.
    :param mode: Colour mode of the verify code picture, default 'RGB'.
    :param bg_color: A 3-elements tuple, containing (R, G, B) three integers
        which describes the background colour of the verify code picture.
    :param font_size: Font size of the verify code, default 22.
    :param font_face: Font face of the verify code, default 'Arial.ttf'.
    :param text_length: Length of characters which compose the verify code,
        default 4.
    :param noise_coverage: Probability of noise points, default 0.3.
    :param redis_dsn: Redis DSN(data source name), e.g.
        redis://[:password]@localhost:6379/0.
    :param ttl: Redis sotrage expiration time, count on seconds.
    :param max_try: Trials limit for verify code, if try counts exceeded, the
        current verify code would be expired, default 3.
    :param redis_factory: Factory function to create redis client.
    """

    def __init__(
            self,
            charset=CHARSET,
            width=120,
            height=30,
            mode='RGB',
            bg_color=BG_COLOR,
            font_size=22,
            font_face='Arial.ttf',
            text_length=4,
            noise_coverage=0.3,
            redis_dsn=REDIS_DSN,
            ttl=TOKEN_EXPIRATION,
            max_try=MAX_TRY,
            redis_factory=None):
        self._r = redis_factory(redis_dsn) if redis_factory else \
            Redis.from_url(redis_dsn)
        self._ttl = ttl
        self._charset = charset
        self._width = width
        self._height = height
        self._mode = mode
        self._bg_color = bg_color
        self._font_size = font_size
        self._font_face = font_face
        self._text_length = text_length
        self._noise_coverage = noise_coverage
        self._max_try = max_try

    def new(self, fmt='JPEG', quality=70):
        """
        Create an verify code picture, no record to redis.

        :param fmt: The format of the picture, default 'JPEG'.
        :param quality: The quality of the picture, default 70%.
        Returns an :py:class:`~StringIO.StringIO` object buffer the verify code
            picture and the verify code.
        """
        canvas = Image.new(
            self._mode,
            (self._width,
             self._height),
            self._bg_color)
        drawer = ImageDraw.Draw(canvas)
        verify_code = self.drawtext(drawer)
        self.noisy(drawer)
        self.blur(canvas)
        self.line(drawer, canvas)
        buf = StringIO.StringIO()
        canvas.save(buf, fmt, quality=quality)
        return buf, verify_code

    def save(self, image_buf, verify_code):
        """
        Create image_hash and save it to redis.

        :param image_buf: The data stream of the picture.
        :param verify_code: The corresponding verify code of the picture.
        Returns an image_hash in hex generated by the content of the picture
            using sha256 algorithm.
        """
        image_hash = hashlib.sha256(image_buf.getvalue()).hexdigest()
        with self._r.pipeline(transaction=False) as pipe:
            pipe.hset(image_hash, 'verify_code', verify_code)
            pipe.expire(image_hash, self._ttl)
            if self.is_pipe_success(pipe.execute()):
                return image_hash
            raise VerifyCodeError(u'Fail to create verify code')

    def verify_code_create(self, fmt='JPEG', quality=70):
        """
        Create an verify code picture and save it to redis by its image hash.

        :param fmt: The format of the picture, default 'JPEG'.
        :param quality: The quality of the picture, default 70%.
        Returns an :py:class:`~StringIO.StringIO` object buffer the verify code
            picture and the image hash.
        """
        canvas = Image.new(
            self._mode,
            (self._width,
             self._height),
            self._bg_color)
        drawer = ImageDraw.Draw(canvas)
        verify_code = self.drawtext(drawer)
        self.noisy(drawer)
        self.blur(canvas)
        self.line(drawer, canvas)

        image_buf = StringIO.StringIO()
        canvas.save(image_buf, fmt, quality=quality)

        image_hash = hashlib.sha256(image_buf.getvalue()).hexdigest()
        with self._r.pipeline(transaction=False) as pipe:
            pipe.hset(image_hash, 'verify_code', verify_code)
            pipe.expire(image_hash, self._ttl)
            if self.is_pipe_success(pipe.execute()):
                return image_buf, image_hash
            raise VerifyCodeError(u'Fail to create verify code')

    def verify_code_validate(self, image_hash, verify_code):
        """
        Validate verify code send by the client.

        :param image_hash: The image hash of the verify code picture.
        :param verify_code: The verify code received from the browser.
        Raises :py:class:`~VerifyCodeError` exception if verify code wrong.
        """
        try_count = self._r.hincrby(image_hash, 'try_count', 1)
        if try_count > self._max_try:
            self._r.expire(image_hash, 0)
            raise VerifyCodeError(u'Retry times exceeded')
        ref_code = self._r.hget(image_hash, 'verify_code')
        if not ref_code or \
                verify_code.upper() != ref_code.upper():
            raise VerifyCodeError(u'Incorrect verify code')
        self._r.expire(image_hash, 0)

    def randchars(self):
        """
        Create a sequence of characters sampled from `self._charset` by
            `self._text_length`.
        """
        samples = random.sample(self._charset, self._text_length)
        return ''.join(samples)

    def randcolor(self, left_edge, right_edge):
        """
        Create a random RGB color.

        :param left_edge: Minimal color value, must greater than or equal to 0.
        :param right_edge: Maximal color value, must less than or equal to 255.
        Returns a 3-tuple RGB color pixel.
        """
        color_pixel = (
            random.randint(
                left_edge, right_edge), random.randint(
                left_edge, right_edge), random.randint(
                left_edge, right_edge))
        return color_pixel

    def drawtext(self, drawer):
        """
        Draw verify code to the picture.

        :param drawer: An :py:class:`~ImageDraw.Draw` object.
        Returns the random chars(verify code) which has been drawn to picture.
        """
        rand_chars = self.randchars()
        font = ImageFont.truetype(self._font_face, self._font_size)
        font_width, font_height = font.getsize(rand_chars)
        drawer.text(
            ((self._width - font_width) / 2,
             (self._height - font_height) / 2),
            rand_chars,
            font=font,
            fill=self.randcolor(0, 127)
        )

        return rand_chars

    def noisy(self, drawer):
        """
        Drop out noisy points to the picture.

        :param drawer: An :py:class:`~PIL.ImageDraw` object.
        """
        cov = self._noise_coverage if 0 <= self._noise_coverage < 1 else 0.5
        for width_pixel in xrange(self._width):
            for height_pixel in xrange(self._height):
                if random.random() > cov:
                    continue
                drawer.point(
                    (width_pixel, height_pixel),
                    fill=self.randcolor(64, 255)
                )

    def line(self, drawer, canvas):
        """
        Draw line above text, add more confusing elements.

        :param drawer: An :py:class:`~PIL.ImageDraw` object.
        :param canvas: An :py:class:`~PIL.Image.Image` object.
        """
        start_width = random.randint(
            self._width / 8, self._width / 4)
        start_height = random.randint(
            self._height / 4, self._height * 3 / 4)
        stop_width = random.randint(
            self._width * 3 / 4, self._width * 7 / 8)
        stop_height = random.randint(
            self._height / 4, self._height * 3 / 4)
        drawer.line(
            (start_width,
             start_height,
             stop_width,
             stop_height),
            fill=random.randint(128, 155),
            width=3
        )

    def blur(self, canvas):
        """
        Blur the picture.

        :param canvas: An :py:class:`~PIL.Image.Image` object.
        """
        canvas.filter(ImageFilter.BLUR)

    def is_pipe_success(self, pipe_res):
        """
        Judge the result of the Redis pipeline.

        :param pipe_res: Response sequence of the Redis pipeline executed.
        Returns True if each pipeline command executed successfully,
            else False.
        """
        return reduce(
            lambda x, y: bool(x) & bool(y),
            pipe_res)


def default_manager():
    return VerifyCodeManager()
